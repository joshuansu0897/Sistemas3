/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package socketswing;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author joshuansu
 */
public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    private ServerSocket SERVIDOR;
    private Map<String, Socket> CLIENTES;
    private Map<String, DataOutputStream> DOSs;

    public Server() {
        initComponents();
        try {
            SERVIDOR = new ServerSocket(8080);
            CLIENTES = new HashMap<>();
            DOSs = new HashMap<>();

            Thread clientLisent = new Thread() {
                @Override
                public void run() {
                    try {
                        while (true) {
                            Socket cl = SERVIDOR.accept();
                            DataInputStream dis = new DataInputStream(cl.getInputStream());
                            DataOutputStream dos = new DataOutputStream(cl.getOutputStream());

                            String uuid = dis.readUTF();

                            dos.writeUTF("Bienvenido.");
                            dos.flush();

                            CLIENTES.put(uuid, cl);
                            DOSs.put(uuid, dos);
                            sendMessage("Cliente nuevo con uuid " + uuid, null);

                            Thread chatLisent = new Thread() {
                                @Override
                                public void run() {
                                    while (true) {
                                        String UUID = uuid;
                                        DataInputStream DIS = dis;

                                        String msg = null;
                                        try {
                                            msg = DIS.readUTF().trim();
                                        } catch (IOException ex) {
                                            System.out.println("Error: " + ex.getMessage());
                                        }

                                        if (msg == null || "".equals(msg)) {
                                            continue;
                                        }

                                        if (msg.equals("DESCONECTAR")) {
                                            try {
                                                synchronized (DOSs) {
                                                    DOSs.get(UUID).close();
                                                    DOSs.remove(UUID);
                                                }
                                                synchronized (CLIENTES) {
                                                    CLIENTES.get(UUID).close();
                                                    CLIENTES.remove(UUID);
                                                }
                                            } catch (IOException ex) {
                                                System.out.println("Error: " + ex.getMessage());
                                            }
                                            chat.append(UUID + ": se desconecto....\n");
                                            sendMessage("se desconecto....", UUID);
                                            break;
                                        }

                                        chat.append(UUID + ": " + msg + "\n");
                                        sendMessage(msg, UUID);
                                    }
                                    Thread.currentThread().interrupt();
                                }
                            };

                            chatLisent.start();
                        }
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            };

            clientLisent.start();
            System.out.println("Escuchando por clientes...");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        mensaje = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        chat.setEditable(false);
        chat.setColumns(20);
        chat.setRows(5);
        jScrollPane1.setViewportView(chat);

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mensaje.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                mensajeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mensaje)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mensajeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mensajeKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            String msg = mensaje.getText().trim();
            sendMessage(msg, null);
        }
    }//GEN-LAST:event_mensajeKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String msg = mensaje.getText().trim();
        sendMessage(msg, null);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Server().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chat;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mensaje;
    // End of variables declaration//GEN-END:variables

    private void sendMessage(String str, String uuidSender) {
        String message = str.trim();

        if (message.equals("")) {
            return;
        }

        for (Map.Entry<String, DataOutputStream> entry : DOSs.entrySet()) {
            String uuid = entry.getKey();
            if (uuid.equals(uuidSender)) {
                continue;
            }

            if (uuidSender != null) {
                message += "&&UUID&&" + uuidSender;
            }

            DataOutputStream dos = entry.getValue();
            try {
                dos.writeUTF(message);
                dos.flush();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        if (uuidSender == null) {
            mensaje.setText("");
            chat.append("Server: " + message + "\n");
        }
    }
}
